#!/bin/bash

#set -x

# Branches (in same repo) that we dont want to include in CI builds
# Space separated list of branch names
blacklist_branches="
  internal-playlists
"

# Alien branches (from other repos) that we want to pull in (pull requests etc)
# Space separated list, each following the 'login/repo/branch' format
#  Octoton/VinylMusicPlayer/random_album_access_version_1
alien_branches="
"

# Support for CircleCI
[ -n "${CIRCLE_TAG}" ] && export CI_TAG="${CIRCLE_TAG}"
[ -n "${CIRCLE_BRANCH}" ] && export CI_BRANCH="${CIRCLE_BRANCH}"

# Support for Github Actions
if [ "${GITHUB_REF_TYPE}" = 'tag' ]; then
  export CI_TAG="${GITHUB_REF_NAME}"
elif [ -n "${GITHUB_REF_NAME}" ]; then
  export CI_BRANCH="${GITHUB_REF_NAME}"
fi

# Sanity checks
[ -n "${CI_TAG}" ] && exit 0 # Building a tag, dont mess around
[ -z "${CI_BRANCH}" ] && exit 0 # Dont have the branch name, dont go forward

function git_init()
{
    git config --global user.email "$0@ci-bot"
    git config --global user.name "$0"
}

case "${CI_BRANCH}" in
    cont-integ)
        echo "Branch '${CI_BRANCH}' detected"
        git_init
        git pull --unshallow # Force full history, to support rebase/merge with other branches
        git fetch origin
        git rebase origin/master || exit 1
        echo
        ;;

    *)
        exit 0 # nothing to do
        ;;
esac

# Collect commits that describe this CI build (what are the branches, at which state)
function git_describe()
{
    object="$1"
    echo "<li><b>${object}</b><br/><code>$(git show --summary --oneline ${object})</code></li>"
}
last_commits="$(git_describe origin/${CI_BRANCH})"

# Merge with feature branches, unless black-listed
branches=$(git branch -a | grep remotes/origin/ | cut -d/ -f3- | grep -v 'HEAD ')

function is_blacklisted()
{
    local branch=$1

    for bl in ${blacklist_branches}; do
        [ "${branch}" = "${bl}" ] && return 0
    done
    return 1
}

function git_merge()
{
    local from_branch="$1"

    echo "Merge with '${from_branch}'..."
    git merge \
      --no-edit \
      "${from_branch}" \
      && return 0 \
      || return 1
}

for branch in ${branches}; do
    [ "${branch}" = "${CI_BRANCH}" ] && continue

    is_blacklisted "${branch}" && continue

    git_merge "origin/${branch}" || exit 1
    last_commits+="$(git_describe origin/${branch})"
    echo
done

# Merge with white-listed remotes (pull requests etc)
for alien_branch in ${alien_branches}; do
    user=$(echo "${alien_branch}" | cut -d/ -f1)
    repo=$(echo "${alien_branch}" | cut -d/ -f2)
    branch=$(echo "${alien_branch}" | cut -d/ -f3-)

    echo "Add alien '${user}/${repo}'..."
    git remote add "${user}/${repo}" "https://github.com/${user}/${repo}" || exit 1
    git remote update "${user}/${repo}" || exit 1

    git_merge "${alien_branch}" || exit 1
    last_commits+="$(git_describe ${alien_branch})"
    echo
done

# Patch the changelog
changelog_html="app/src/main/assets/vinylmusicplayer-changelog.html"
{
    echo "<html><body>
        <p>Integration build from branch <code>${CI_BRANCH}</code>, with merges from the following:</p>
        <ul>
            ${last_commits}
        </ul>
        <p>This change log is auto-generated using <code>$0</code></p>
        </body></html>"
} > ${changelog_html}
